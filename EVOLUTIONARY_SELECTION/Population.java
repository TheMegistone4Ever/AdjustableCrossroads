package LibTest.TERM_PAPER.EVOLUTIONARY_SELECTION;

import org.jetbrains.annotations.NotNull;

import java.util.Arrays;
import java.util.Comparator;

import static LibTest.TERM_PAPER.EVOLUTIONARY_SELECTION.TrafficLightOptimizer.*;

/**
 * Керує популяцією осіб протягом еволюції генетичного алгоритму.
 */
public class Population {

    /**
     * Ймовірності елітизму для різних поколінь.
     */
    private static final double[] elitarismPercentage = {
            0.4000, 0.3996, 0.3992, 0.3988, 0.3984, 0.3980, 0.3976, 0.3972, 0.3968, 0.3964, 0.3960, 0.3956, 0.3952,
            0.3948, 0.3944, 0.3940, 0.3937, 0.3933, 0.3929, 0.3925, 0.3921, 0.3917, 0.3913, 0.3909, 0.3905, 0.3901,
            0.3897, 0.3893, 0.3890, 0.3886, 0.3882, 0.3878, 0.3874, 0.3870, 0.3866, 0.3862, 0.3859, 0.3855, 0.3851,
            0.3847, 0.3843, 0.3839, 0.3835, 0.3832, 0.3828, 0.3824, 0.3820, 0.3816, 0.3813, 0.3809, 0.3805, 0.3801,
            0.3797, 0.3794, 0.3790, 0.3786, 0.3782, 0.3778, 0.3775, 0.3771, 0.3767, 0.3763, 0.3760, 0.3756, 0.3752,
            0.3748, 0.3745, 0.3741, 0.3737, 0.3733, 0.3730, 0.3726, 0.3722, 0.3718, 0.3715, 0.3711, 0.3707, 0.3704,
            0.3700, 0.3696, 0.3692, 0.3689, 0.3685, 0.3681, 0.3678, 0.3674, 0.3670, 0.3667, 0.3663, 0.3659, 0.3656,
            0.3652, 0.3648, 0.3645, 0.3641, 0.3637, 0.3634, 0.3630, 0.3627, 0.3623, 0.3619, 0.3616, 0.3612, 0.3609,
            0.3605, 0.3601, 0.3598, 0.3594, 0.3591, 0.3587, 0.3583, 0.3580, 0.3576, 0.3573, 0.3569, 0.3565, 0.3562,
            0.3558, 0.3555, 0.3551, 0.3548, 0.3544, 0.3541, 0.3537, 0.3534, 0.3530, 0.3526, 0.3523, 0.3519, 0.3516,
            0.3512, 0.3509, 0.3505, 0.3502, 0.3498, 0.3495, 0.3491, 0.3488, 0.3484, 0.3481, 0.3477, 0.3474, 0.3470,
            0.3467, 0.3464, 0.3460, 0.3457, 0.3453, 0.3450, 0.3446, 0.3443, 0.3439, 0.3436, 0.3433, 0.3429, 0.3426,
            0.3422, 0.3419, 0.3415, 0.3412, 0.3409, 0.3405, 0.3402, 0.3398, 0.3395, 0.3392, 0.3388, 0.3385, 0.3381,
            0.3378, 0.3375, 0.3371, 0.3368, 0.3365, 0.3361, 0.3358, 0.3354, 0.3351, 0.3348, 0.3344, 0.3341, 0.3338,
            0.3334, 0.3331, 0.3328, 0.3324, 0.3321, 0.3318, 0.3314, 0.3311, 0.3308, 0.3305, 0.3301, 0.3298, 0.3295,
            0.3291, 0.3288, 0.3285, 0.3281, 0.3278, 0.3275, 0.3272, 0.3268, 0.3265, 0.3262, 0.3259, 0.3255, 0.3252,
            0.3249, 0.3246, 0.3242, 0.3239, 0.3236, 0.3233, 0.3229, 0.3226, 0.3223, 0.3220, 0.3217, 0.3213, 0.3210,
            0.3207, 0.3204, 0.3200, 0.3197, 0.3194, 0.3191, 0.3188, 0.3184, 0.3181, 0.3178, 0.3175, 0.3172, 0.3169,
            0.3165, 0.3162, 0.3159, 0.3156, 0.3153, 0.3150, 0.3147, 0.3143, 0.3140, 0.3137, 0.3134, 0.3131, 0.3128,
            0.3125, 0.3121, 0.3118, 0.3115, 0.3112, 0.3109, 0.3106, 0.3103, 0.3100, 0.3097, 0.3093, 0.3090, 0.3087,
            0.3084, 0.3081, 0.3078, 0.3075, 0.3072, 0.3069, 0.3066, 0.3063, 0.3060, 0.3057, 0.3054, 0.3050, 0.3047,
            0.3044, 0.3041, 0.3038, 0.3035, 0.3032, 0.3029, 0.3026, 0.3023, 0.3020, 0.3017, 0.3014, 0.3011, 0.3008,
            0.3005, 0.3002, 0.2999, 0.2996, 0.2993, 0.2990, 0.2987, 0.2984, 0.2981, 0.2978, 0.2975, 0.2972, 0.2969,
            0.2966, 0.2963, 0.2960, 0.2957, 0.2954, 0.2951, 0.2948, 0.2946, 0.2943, 0.2940, 0.2937, 0.2934, 0.2931,
            0.2928, 0.2925, 0.2922, 0.2919, 0.2916, 0.2913, 0.2910, 0.2908, 0.2905, 0.2902, 0.2899, 0.2896, 0.2893,
            0.2890, 0.2887, 0.2884, 0.2881, 0.2879, 0.2876, 0.2873, 0.2870, 0.2867, 0.2864, 0.2861, 0.2858, 0.2856,
            0.2853, 0.2850, 0.2847, 0.2844, 0.2841, 0.2839, 0.2836, 0.2833, 0.2830, 0.2827, 0.2824, 0.2822, 0.2819,
            0.2816, 0.2813, 0.2810, 0.2807, 0.2805, 0.2802, 0.2799, 0.2796, 0.2793, 0.2791, 0.2788, 0.2785, 0.2782,
            0.2780, 0.2777, 0.2774, 0.2771, 0.2768, 0.2766, 0.2763, 0.2760, 0.2757, 0.2755, 0.2752, 0.2749, 0.2746,
            0.2744, 0.2741, 0.2738, 0.2735, 0.2733, 0.2730, 0.2727, 0.2725, 0.2722, 0.2719, 0.2716, 0.2714, 0.2711,
            0.2708, 0.2706, 0.2703, 0.2700, 0.2697, 0.2695, 0.2692, 0.2689, 0.2687, 0.2684, 0.2681, 0.2679, 0.2676,
            0.2673, 0.2671, 0.2668, 0.2665, 0.2663, 0.2660, 0.2657, 0.2655, 0.2652, 0.2649, 0.2647, 0.2644, 0.2641,
            0.2639, 0.2636, 0.2633, 0.2631, 0.2628, 0.2626, 0.2623, 0.2620, 0.2618, 0.2615, 0.2612, 0.2610, 0.2607,
            0.2605, 0.2602, 0.2599, 0.2597, 0.2594, 0.2592, 0.2589, 0.2586, 0.2584, 0.2581, 0.2579, 0.2576, 0.2574,
            0.2571, 0.2568, 0.2566, 0.2563, 0.2561, 0.2558, 0.2556, 0.2553, 0.2551, 0.2548, 0.2545, 0.2543, 0.2540,
            0.2538, 0.2535, 0.2533, 0.2530, 0.2528, 0.2525, 0.2523, 0.2520, 0.2518, 0.2515, 0.2513, 0.2510, 0.2508,
            0.2505, 0.2503, 0.2500, 0.2498, 0.2495, 0.2493, 0.2490, 0.2488, 0.2485, 0.2483, 0.2480, 0.2478, 0.2475,
            0.2473, 0.2470, 0.2468, 0.2465, 0.2463, 0.2460, 0.2458, 0.2455, 0.2453, 0.2451, 0.2448, 0.2446, 0.2443,
            0.2441, 0.2438, 0.2436, 0.2433, 0.2431, 0.2429, 0.2426, 0.2424, 0.2421, 0.2419, 0.2416, 0.2414, 0.2412,
            0.2409, 0.2407, 0.2404, 0.2402, 0.2400, 0.2397, 0.2395, 0.2392, 0.2390, 0.2388, 0.2385, 0.2383, 0.2380,
            0.2378, 0.2376, 0.2373, 0.2371, 0.2369, 0.2366, 0.2364, 0.2361, 0.2359, 0.2357, 0.2354, 0.2352, 0.2350,
            0.2347, 0.2345, 0.2343, 0.2340, 0.2338, 0.2336, 0.2333, 0.2331, 0.2329, 0.2326, 0.2324, 0.2322, 0.2319,
            0.2317, 0.2315, 0.2312, 0.2310, 0.2308, 0.2305, 0.2303, 0.2301, 0.2299, 0.2296, 0.2294, 0.2292, 0.2289,
            0.2287, 0.2285, 0.2283, 0.2280, 0.2278, 0.2276, 0.2273, 0.2271, 0.2269, 0.2267, 0.2264, 0.2262, 0.2260,
            0.2258, 0.2255, 0.2253, 0.2251, 0.2249, 0.2246, 0.2244, 0.2242, 0.2240, 0.2237, 0.2235, 0.2233, 0.2231,
            0.2228, 0.2226, 0.2224, 0.2222, 0.2220, 0.2217, 0.2215, 0.2213, 0.2211, 0.2208, 0.2206, 0.2204, 0.2202,
            0.2200, 0.2197, 0.2195, 0.2193, 0.2191, 0.2189, 0.2186, 0.2184, 0.2182, 0.2180, 0.2178, 0.2176, 0.2173,
            0.2171, 0.2169, 0.2167, 0.2165, 0.2163, 0.2160, 0.2158, 0.2156, 0.2154, 0.2152, 0.2150, 0.2147, 0.2145,
            0.2143, 0.2141, 0.2139, 0.2137, 0.2135, 0.2132, 0.2130, 0.2128, 0.2126, 0.2124, 0.2122, 0.2120, 0.2118,
            0.2116, 0.2113, 0.2111, 0.2109, 0.2107, 0.2105, 0.2103, 0.2101, 0.2099, 0.2097, 0.2094, 0.2092, 0.2090,
            0.2088, 0.2086, 0.2084, 0.2082, 0.2080, 0.2078, 0.2076, 0.2074, 0.2072, 0.2069, 0.2067, 0.2065, 0.2063,
            0.2061, 0.2059, 0.2057, 0.2055, 0.2053, 0.2051, 0.2049, 0.2047, 0.2045, 0.2043, 0.2041, 0.2039, 0.2037,
            0.2035, 0.2033, 0.2031, 0.2028, 0.2026, 0.2024, 0.2022, 0.2020, 0.2018, 0.2016, 0.2014, 0.2012, 0.2010,
            0.2008, 0.2006, 0.2004, 0.2002, 0.2000, 0.1998, 0.1996, 0.1994, 0.1992, 0.1990, 0.1988, 0.1986, 0.1984,
            0.1982, 0.1980, 0.1978, 0.1976, 0.1974, 0.1972, 0.1971, 0.1969, 0.1967, 0.1965, 0.1963, 0.1961, 0.1959,
            0.1957, 0.1955, 0.1953, 0.1951, 0.1949, 0.1947, 0.1945, 0.1943, 0.1941, 0.1939, 0.1937, 0.1935, 0.1933,
            0.1931, 0.1930, 0.1928, 0.1926, 0.1924, 0.1922, 0.1920, 0.1918, 0.1916, 0.1914, 0.1912, 0.1910, 0.1908,
            0.1907, 0.1905, 0.1903, 0.1901, 0.1899, 0.1897, 0.1895, 0.1893, 0.1891, 0.1889, 0.1888, 0.1886, 0.1884,
            0.1882, 0.1880, 0.1878, 0.1876, 0.1874, 0.1873, 0.1871, 0.1869, 0.1867, 0.1865, 0.1863, 0.1861, 0.1859,
            0.1858, 0.1856, 0.1854, 0.1852, 0.1850, 0.1848, 0.1847, 0.1845, 0.1843, 0.1841, 0.1839, 0.1837, 0.1835,
            0.1834, 0.1832, 0.1830, 0.1828, 0.1826, 0.1824, 0.1823, 0.1821, 0.1819, 0.1817, 0.1815, 0.1814, 0.1812,
            0.1810, 0.1808, 0.1806, 0.1805, 0.1803, 0.1801, 0.1799, 0.1797, 0.1796, 0.1794, 0.1792, 0.1790, 0.1788,
            0.1787, 0.1785, 0.1783, 0.1781, 0.1779, 0.1778, 0.1776, 0.1774, 0.1772, 0.1771, 0.1769, 0.1767, 0.1765,
            0.1763, 0.1762, 0.1760, 0.1758, 0.1756, 0.1755, 0.1753, 0.1751, 0.1749, 0.1748, 0.1746, 0.1744, 0.1742,
            0.1741, 0.1739, 0.1737, 0.1735, 0.1734, 0.1732, 0.1730, 0.1729, 0.1727, 0.1725, 0.1723, 0.1722, 0.1720,
            0.1718, 0.1717, 0.1715, 0.1713, 0.1711, 0.1710, 0.1708, 0.1706, 0.1705, 0.1703, 0.1701, 0.1699, 0.1698,
            0.1696, 0.1694, 0.1693, 0.1691, 0.1689, 0.1688, 0.1686, 0.1684, 0.1683, 0.1681, 0.1679, 0.1677, 0.1676,
            0.1674, 0.1672, 0.1671, 0.1669, 0.1667, 0.1666, 0.1664, 0.1662, 0.1661, 0.1659, 0.1657, 0.1656, 0.1654,
            0.1653, 0.1651, 0.1649, 0.1648, 0.1646, 0.1644, 0.1643, 0.1641, 0.1639, 0.1638, 0.1636, 0.1634, 0.1633,
            0.1631, 0.1630, 0.1628, 0.1626, 0.1625, 0.1623, 0.1621, 0.1620, 0.1618, 0.1617, 0.1615, 0.1613, 0.1612,
            0.1610, 0.1608, 0.1607, 0.1605, 0.1604, 0.1602, 0.1600, 0.1599, 0.1597, 0.1596, 0.1594, 0.1592, 0.1591,
            0.1589, 0.1588, 0.1586, 0.1585, 0.1583, 0.1581, 0.1580, 0.1578, 0.1577, 0.1575, 0.1573, 0.1572, 0.1570,
            0.1569, 0.1567, 0.1566, 0.1564, 0.1563, 0.1561, 0.1559, 0.1558, 0.1556, 0.1555, 0.1553, 0.1552, 0.1550,
            0.1549, 0.1547, 0.1545, 0.1544, 0.1542, 0.1541, 0.1539, 0.1538, 0.1536, 0.1535, 0.1533, 0.1532, 0.1530,
            0.1529, 0.1527, 0.1525, 0.1524, 0.1522, 0.1521, 0.1519, 0.1518, 0.1516, 0.1515, 0.1513, 0.1512, 0.1510,
            0.1509, 0.1507, 0.1506, 0.1504, 0.1503, 0.1501, 0.1500, 0.1498, 0.1497, 0.1495, 0.1494, 0.1492, 0.1491,
            0.1489, 0.1488, 0.1486, 0.1485, 0.1483, 0.1482, 0.1480, 0.1479, 0.1477, 0.1476, 0.1474, 0.1473
    };

    /**
     * Масив осіб, що складають популяцію.
     */
    protected Individual[] individuals;

    /**
     * Номер покоління.
     */
    protected int generation = 0;

    /**
     * Створює популяцію з варіаціями початкових часів фаз.
     *
     * @param size              Кількість осіб у популяції
     * @param initialPhaseTimes Базові часи фаз для початкової популяції
     */
    public Population(int size, int[] initialPhaseTimes) {
        individuals = new Individual[size];
        for (int i = 0; i < size; ++i) {
            int[] variedPhaseTimes = Arrays.copyOf(initialPhaseTimes, initialPhaseTimes.length);
            variedPhaseTimes[0] += RANDOM.nextInt(MAX_PHASE_TIME - MIN_PHASE_TIME + 1) + MIN_PHASE_TIME;
            variedPhaseTimes[2] += RANDOM.nextInt(MAX_PHASE_TIME - MIN_PHASE_TIME + 1) + MIN_PHASE_TIME;
            variedPhaseTimes[0] = Math.min(MAX_PHASE_TIME, Math.max(MIN_PHASE_TIME, variedPhaseTimes[0]));
            variedPhaseTimes[2] = Math.min(MAX_PHASE_TIME, Math.max(MIN_PHASE_TIME, variedPhaseTimes[2]));
            individuals[i] = new Individual(variedPhaseTimes);
        }
    }

    /**
     * Еволюція популяції: сортування, елітизм, відтворення та мутація.
     */
    public void evolve() {
        Arrays.sort(individuals, Comparator.comparingDouble(ind -> ind.fitness));

        Individual[] newGeneration = new Individual[individuals.length];

        // Елітизм: збереження кращих виконавців
        double factor = generation < elitarismPercentage.length ? elitarismPercentage[generation] : .4 * Math.exp(-generation / 1000.);
        int eliteCount = (int) (individuals.length * factor);
        System.arraycopy(individuals, 0, newGeneration, 0, eliteCount);

        // Заповнення решти популяції через відтворення
        for (int i = eliteCount; i < newGeneration.length; ++i) {
            newGeneration[i] = (RANDOM.nextDouble() < CROSSOVER_RATE) ? createChild() : createMutatedIndividual();
        }

        individuals = newGeneration;
    }

    /**
     * Створює дочірню особу через турнірний відбір, схрещування та мутацію.
     *
     * @return Дочірня особа
     */
    private @NotNull Individual createChild() {
        Individual parent1 = tournamentSelection();
        Individual parent2 = tournamentSelection();

        // Схрещування та мутація
        int[] childPhaseTimes = crossover(parent1.phaseTimes, parent2.phaseTimes);
        Individual child = new Individual(childPhaseTimes);
        child.mutate();

        return child;
    }

    /**
     * Створює мутовану особу з випадково вибраної особи у популяції.
     *
     * @return Мутована особа
     */
    private @NotNull Individual createMutatedIndividual() {
        Individual mutatedIndividual = new Individual(
                individuals[RANDOM.nextInt(individuals.length)].phaseTimes
        );
        mutatedIndividual.mutate();
        return mutatedIndividual;
    }

    /**
     * Метод турнірного відбору для вибору батьківських осіб.
     *
     * @return Найкраща особа з випадкової підмножини турніру
     */
    private Individual tournamentSelection() {
        Individual best = individuals[RANDOM.nextInt(individuals.length)];
        for (int i = 1; i < TOURNEY_SIZE; ++i) {
            Individual candidate = individuals[RANDOM.nextInt(individuals.length)];
            if (candidate.fitness < best.fitness) {
                best = candidate;
            }
        }
        return best;
    }

    /**
     * Виконує рівномірне схрещування між двома батьківськими особами.
     *
     * @param parent1 Часи фаз першого батька
     * @param parent2 Часи фаз другого батька
     * @return Часи фаз дочірньої особи, згенеровані через схрещування
     */
    private int @NotNull [] crossover(int[] parent1, int[] parent2) {
        int[] child = Arrays.copyOf(parent1, parent1.length);
        for (int i = 0; i < child.length; ++i) {
            if (RANDOM.nextDouble() < CROSSOVER_ALPHA) {
                child[i] = parent2[i];
            }
        }
        return child;
    }

    /**
     * Отримує найкращу особу в поточній популяції.
     *
     * @return Особа з найнижчою придатністю (найкраще рішення)
     */
    public Individual getBestIndividual() {
        return Arrays.stream(individuals)
                .parallel()
                .min(Comparator.comparingDouble(ind -> ind.fitness))
                .orElse(null);
    }

    /**
     * Встановлює номер поточного покоління.
     *
     * @param generation Номер покоління
     */
    public void setGeneration(int generation) {
        this.generation = generation;
    }
}
